// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum Category {
  ELECTRONICS
  FURNITURE
  HOME_APPLIANCES
  SPORTING_GOODS
  OUTDOOR
  TOYS
}

enum ProductAvailabilityStatus {
  AVAILABLE      
  SOLD         
  RENTED
  PENDING_SALE
}

enum ProductRentalPeriod {
  PER_HOUR
  PER_DAY
  PER_WEEK
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  address   String
  email     String   @unique
  phone     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products      Product[]

  purchaseProductRecords PurchaseProductRecord[]

  rentedProductsRecords RentalProductRecord[]

  @@map("users")
}

model Product{
  id        String   @id @default(uuid())
  title     String   @db.VarChar(255)
  description String @db.VarChar(1000)
  categories Category[]
  price       Decimal    @db.Decimal(10, 2)
  rentalPrice Decimal    @db.Decimal(10, 2)
  rentalPeriod ProductRentalPeriod

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  productAvailability ProductAvailabilityStatus

  purchaseRecord PurchaseProductRecord?

  rentalDetails RentalProductRecord[]

  @@map("products")
}

model RentalProductRecord{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rentedOn DateTime
  rentedTill DateTime

  product Product @relation(fields: [productId], references: [id])
  productId String

  rentedBy User @relation(fields: [rentedByUserId], references: [id])
  rentedByUserId String

  @@map("rental_product_records")
}

model PurchaseProductRecord{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  productId String @unique

  purchasedBy User @relation(fields: [purchasedByUserId], references: [id])
  purchasedByUserId String

  @@map("purchase_product_records")
}

